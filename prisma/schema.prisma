// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Example {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model RightAnswer {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  question   Question @relation(fields: [questionId], references: [id])
  questionId String      @unique @db.ObjectId

  answer   Answer @relation(fields: [answerId], references: [id])
  answerId String      @unique @db.ObjectId
}


model Answer {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  text String
  rightAnswer RightAnswer?

  Question   Question? @relation(fields: [questionId], references: [id])
  questionId String    @db.ObjectId
}

model Question {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  hasMedia      Boolean
  isTimed       Boolean
  timeInSeconds Int?
  mediaSrc      String?
  text          String

  answers Answer[]
  rightAnswer RightAnswer?

  Test   Test?  @relation(fields: [testId], references: [id])
  testId String @db.ObjectId
}

model Test {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name          String
  isTimed       Boolean
  timeInMinutes Int?
  questions     Question[]

  author   User?  @relation(fields: [authorId], references: [id])
  authorId String @db.ObjectId
}

// Necessary for Next auth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tests      Test[]
  takenTests String[]
}

enum Role {
  ADMIN
  CREATOR
  USER
}
